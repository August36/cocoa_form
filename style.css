* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #f5f5f5;
  font-family: Arial, sans-serif;
  margin-top: 20px;
  margin-bottom: 20px;
}

.container {
  width: 90%;
  max-width: 600px;
}

form {
  background-color: #ffffff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.1);
}

fieldset {
  border: none;
  padding: 0;
  margin-bottom: 20px;
}

legend {
  font-size: 1.3em;
  font-weight: bold;
  color: #333333;
  margin-bottom: 10px;
}

.form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
  color: #333333;
}

label:has(input):focus {
  outline: 2px solid blue;
}

input[type="text"],
input[type="number"] {
  width: 100%;
  padding: 10px;
  border: 1px solid #cccccc;
  border-radius: 5px;
}

input[type="text"]:focus,
input[type="number"]:focus {
  outline: 2px solid blue;
}

button[type="submit"] {
  background-color: #007bff;
  color: #ffffff;
  border: none;
  border-radius: 5px;
  padding: 10px 20px;
  cursor: pointer;
  font-size: 1em;
  transition: background-color 0.3s;
}

button[type="submit"]:hover {
  background-color: #0056b3;
}

#id_age,
#id_hectares,
#id_familyMembers {
  width: 3.5rem;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input:invalid:not(:focus, :placeholder-shown) + .error {
  border-color: red;
  display: block;
  visibility: visible; /* - bedre end displayblock da display block får feltet til "at hoppe" */
  /* generelt er det dårligt at have placeholders, men du kan ved enten at sætte placeholder=" " eller input::placeholder{opacity: 0;, skjule placeholder teksten og derfor få invalid pseudo class til at virke hensigtsmæssigt} */
}

/* Ny css funktion der kan opnå det samme som overstående kode: :user-invalid */
input:user-invalid {
  background-color: red;
}
input:user-valid {
  background-color: green;
}

input:user-invalid + .error {
  visibility: visible;
}

.error {
  visibility: hidden;
  color: hotpink;
  font-weight: 900;
}

/* input::placeholder {
  opacity: 0;
} */

/* @supports - tjek if browseren understøtter visse ting */

/* @supports (margin: 10px) { */
/* understøtter browseren margin:10px;(fjollet eksempel) - aktiver de styles der kunne stå her */
/* } */

/* @supports (!margin: 10px;) { */
/* understøtter browseren IKKE margin:10px; - aktiver de styles der kunne stå her */
/* } */

/* .form-group:has(input:user-invalid) {
    har klassen .form-group et input felt som ikke er valid - aktiver styles der kunne stå her
} */

/* .form-group:has(input:user-valid) {
    har klassen .form-group et input felt som er validt - aktiver styles der kunne stå her
} */

/* form:valid {
    her kan du fx sige at, når hele formen er udfyldt korrekt, kan du trykke på fx en sign-up button, og omvendt med invalid
} */

/* input,
textarea {
  field-sizing: content; - nu tilpasser textarea sig til mængden af content (altså hvor meget fx tekst der er), i stedet bruge scroll, hvis content fylder mere end textareas størrelse
} - Dette kan også bruge på et input felt*/

/* ved brug af focus state - tænk over kontrast, hvis du fx har darkmode, skal de focus statet måske ændres så det er synligt */

input[type="radio"] {
  accent-color: hotpink;
}

/* cascade layers - en måde at håndtere specificity på 
@layer reset, components, states:

@layer states {
    så stats vil her altid vinde, lige meget hvad jeg har skrevet i resten af min css
}*/

/* font-size: max(16px, 1em); - ved at skrive max og angive de to størrelser, vælges den største størrelse, som er brugbart i at lave et responsivt design - dette kan fx anvendes på et input-felt i et reset layer.
Inputs har sin egen font, men ved at bruge font: inherit; nedarver input-feltet parent containerens font
*/
